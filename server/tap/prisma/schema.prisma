// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FieldType {
  text
  number
  date
  singleSelect
  multipleSelect
  phoneNumber
  email
  age
}

enum Sex {
  m
  f
}

enum Relationship {
  householder
  father
  mother
  children
  cousin
  spouse
  other
}

model User {
  id                 String               @id @default(uuid()) @db.Uuid
  householdId        String               @default(uuid()) @db.Uuid
  title              String
  firstName          String
  lastName           String
  sex                Sex?
  phoneNumber        String?              @unique @db.VarChar(10)
  email              String?
  hashedPassword     String?
  citizenId          String               @unique @db.VarChar(13)
  relationship       Relationship         @default(householder)
  birthDate          DateTime?
  profileURI         String?              @default("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460__480.png")
  userUploadedFile   UserUploadedFile[]
  userFreeUploadFile UserFreeUploadFile[]
  note               Note[]
  userFolder         UserFolder[]
  userGeneratedFile  UserGeneratedFile[]
  userField          UserField[]
}

model Field {
  id                 String               @id @default(uuid()) @db.Uuid
  name               String               @unique
  officialName       String               @unique
  description        String?
  type               FieldType
  generatedFileField GeneratedFileField[]
  userField          UserField[]
  fieldChoice        FieldChoice[]
}

model FieldChoice {
  id           String @id @default(uuid()) @db.Uuid
  field        Field  @relation(fields: [fieldId], references: [id])
  fieldId      String @db.Uuid
  name         String
  officialName String
}

model GeneratedFile {
  id                  String                @id @default(uuid()) @db.Uuid
  name                String                @unique
  officialName        String                @unique
  description         String?
  dayLifeSpan         Int                   @default(-1)
  URI                 String
  generatedFileField  GeneratedFileField[]
  folderGeneratedFile FolderGeneratedFile[]
  generatedFileTag    GeneratedFileTag[]
  userGeneratedFile   UserGeneratedFile[]
}

model GeneratedFileField {
  id              String        @id @default(uuid()) @db.Uuid
  generatedFile   GeneratedFile @relation(fields: [generatedFileId], references: [id])
  generatedFileId String        @db.Uuid
  field           Field         @relation(fields: [fieldId], references: [id])
  fieldId         String        @db.Uuid
  isRequired      Boolean       @default(false)

  @@unique([generatedFileId, fieldId])
}

model UploadedFile {
  id                 String               @id @default(uuid()) @db.Uuid
  name               String               @unique
  officialName       String               @unique
  description        String?
  dayLifeSpan        Int                  @default(-1)
  URI                String
  userUploadedFile   UserUploadedFile[]
  folderUploadedFile FolderUploadedFile[]
  uploadedFileTag    UploadedFileTag[]
}

model UserUploadedFile {
  id             String       @id @default(uuid()) @db.Uuid
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @db.Uuid
  uploadedFile   UploadedFile @relation(fields: [uploadedFileId], references: [id])
  uploadedFileId String       @db.Uuid
  URI            String
  isShared       Boolean      @default(false)
  note           String?
  expirationDate DateTime?
  date           DateTime?    @default(now())

  @@unique([userId, uploadedFileId])
}

model UserFreeUploadFile {
  id             String    @id @default(uuid()) @db.Uuid
  user           User      @relation(fields: [userId], references: [id])
  userId         String    @db.Uuid
  officialName   String
  uploadedDate   DateTime  @default(now())
  expirationDate DateTime?
  URI            String
  isShared       Boolean   @default(false)
  note           String?
  date           DateTime? @default(now())
}

model Note {
  id           String   @id @default(uuid()) @db.Uuid
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @db.Uuid
  createdDate  DateTime @default(now())
  ModifiedDate DateTime @updatedAt
  heading      String
  content      String?
}

model Folder {
  id                  String                @id @default(uuid()) @db.Uuid
  name                String
  officialName        String
  description         String?
  dayLifeSpan         Int                   @default(-1)
  folderUploadedFile  FolderUploadedFile[]
  folderGeneratedFile FolderGeneratedFile[]
  userFolder          UserFolder[]
  FolderTag           FolderTag[]
}

model FolderUploadedFile {
  id             String       @id @default(uuid()) @db.Uuid
  folder         Folder       @relation(fields: [folderId], references: [id])
  folderId       String       @db.Uuid
  uploadedFile   UploadedFile @relation(fields: [uploadedFileId], references: [id])
  uploadedFileId String       @db.Uuid
  amount         Int          @default(1)
  remark         String?

  @@unique([folderId, uploadedFileId])
}

model FolderGeneratedFile {
  id              String        @id @default(uuid()) @db.Uuid
  folder          Folder        @relation(fields: [folderId], references: [id])
  folderId        String        @db.Uuid
  generatedFile   GeneratedFile @relation(fields: [generatedFileId], references: [id])
  generatedFileId String        @db.Uuid
  amount          Int           @default(1)
  remark          String?

  @@unique([folderId, generatedFileId])
}

model Tag {
  id               String             @id @default(uuid()) @db.Uuid
  name             String             @unique
  uploadedFileTag  UploadedFileTag[]
  generatedFileTag GeneratedFileTag[]
  folderTag        FolderTag[]
}

model UploadedFileTag {
  id             String       @id @default(uuid()) @db.Uuid
  uploadedFile   UploadedFile @relation(fields: [uploadedFileId], references: [id])
  uploadedFileId String       @db.Uuid
  tag            Tag          @relation(fields: [tagId], references: [id])
  tagId          String       @db.Uuid

  @@unique([uploadedFileId, tagId])
}

model GeneratedFileTag {
  id              String        @id @default(uuid()) @db.Uuid
  generatedFile   GeneratedFile @relation(fields: [generatedFileId], references: [id])
  generatedFileId String        @db.Uuid
  tag             Tag           @relation(fields: [tagId], references: [id])
  tagId           String        @db.Uuid

  @@unique([generatedFileId, tagId])
}

model UserFolder {
  id       String    @id @default(uuid()) @db.Uuid
  user     User      @relation(fields: [userId], references: [id])
  userId   String    @db.Uuid
  folder   Folder    @relation(fields: [folderId], references: [id])
  folderId String    @db.Uuid
  note     String?
  date     DateTime? @default(now())

  @@unique([userId, folderId])
}

model UserGeneratedFile {
  id              String        @id @default(uuid()) @db.Uuid
  user            User          @relation(fields: [userId], references: [id])
  userId          String        @db.Uuid
  generatedFile   GeneratedFile @relation(fields: [generatedFileId], references: [id])
  generatedFileId String        @db.Uuid
  note            String?
  date            DateTime?     @default(now())

  @@unique([userId, generatedFileId])
}

model UserField {
  id       String    @id @default(uuid()) @db.Uuid
  user     User      @relation(fields: [userId], references: [id])
  userId   String    @db.Uuid
  field    Field     @relation(fields: [fieldId], references: [id])
  fieldId  String    @db.Uuid
  rawValue String
  date     DateTime? @default(now())

  @@unique([userId, fieldId])
}

model FolderTag {
  id       String @id @default(uuid()) @db.Uuid
  folder   Folder @relation(fields: [folderId], references: [id])
  folderId String @db.Uuid
  tag      Tag    @relation(fields: [tagId], references: [id])
  tagId    String @db.Uuid

  @@unique([folderId, tagId])
}
